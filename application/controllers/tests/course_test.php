<?php

/**
 * Course controller test class.
 * Provide unit tests for the Course controller methods.
 * Tests based on the test database. Change it on 'config/database.php' to test.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../course_test'
 */

require_once(APPPATH.'/controllers/course.php');

class Course_Test extends CI_Controller{

	public function __construct(){
		parent::__construct();
		$this->load->library('unit_test');
		$this->unit->use_strict(TRUE);
	}

// Start of tests for listAllCourses() method

	public function listAllCoursesShouldReturnAnArray(){

		$result = $this->callListAllCourses();

		$test_name = "Test if listAllCourses() return an array";

		$this->unit->run($result, 'is_array', $test_name);
	}

	public function listAllCoursesFirstRowIdShouldBeEqualsToTwo(){

		$result = $this->callListAllCourses();

		$expected = "2";

		$test_name = "Test the course id from the first row returned from test database";
		
		$this->unit->run($result[0]['id_course'], $expected, $test_name);
	}

	public function listAllCoursesFirstRowCourseTypeIdShouldBeEqualsToOne(){

		$result = $this->callListAllCourses();

		$expected = "1";

		$test_name = "Test the course type id from the first row returned from test database";
		
		$this->unit->run($result[0]['course_type_id'], $expected, $test_name);
	}

	public function listAllCoursesFirstRowCourseNameShouldBeEqualsToExpected(){

		$result = $this->callListAllCourses();

		$expected = "Engenharia de Energia";

		$test_name = "Test course name from the first row returned from test database";
		
		$this->unit->run($result[0]['course_name'], $expected, $test_name);
	}

	public function listAllCoursesSecondRowIdShouldBeEqualsToThree(){

		$result = $this->callListAllCourses();

		$expected = "3";

		$test_name = "Test the course id from the second row returned from test database";
		
		$this->unit->run($result[1]['id_course'], $expected, $test_name);
	}

	public function listAllCoursesSecondRowCourseTypeIdShouldBeEqualsToOne(){

		$result = $this->callListAllCourses();

		$expected = "1";

		$test_name = "Test the course type id from the first row returned from test database";
		
		$this->unit->run($result[1]['course_type_id'], $expected, $test_name);
	}

	public function listAllCoursesSecondRowCourseNameShouldBeEqualsToExpected(){

		$result = $this->callListAllCourses();

		$expected = "Engenharia Eletrônica";

		$test_name = "Test course name from the second row returned from test database";
		
		$this->unit->run($result[1]['course_name'], $expected, $test_name);
	}

	/**
	 * Instantiate the Course controller and call the listAllCourses() method to test
	 * @return the result of the listAllCourses() method
	 */
	private function callListAllCourses(){
		$course_controller = new Course();
		$result = $course_controller->listAllCourses();

		return $result;
	}

// End of tests for listAllCourses() method

// Start of tests for getCourseTypes() method

	public function getCourseTypesShouldReturnAnArray(){
		
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if getCourseTypes() return an array";

		$this->unit->run($result, 'is_array', $test_name);
	}

	public function getCouseTypesShouldHaveTheKey3(){
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if 'Educação a distancia' is associated to the key '3' on the array";

		$expected = 3;

		$this->unit->run(array_search("Educação a distancia", $result), $expected, $test_name);
	}

	public function getCouseTypesShouldHaveTheKey1(){
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if 'Graduacao' is associated to the key '1' on the array";

		$expected = 1;

		$this->unit->run(array_search("Graduacao", $result), $expected, $test_name);
	}

	public function getCouseTypesShouldHaveTheKey2(){
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if 'Pos graduacao' is associated to the key '2' on the array";

		$expected = 2;

		$this->unit->run(array_search("Pos graduacao", $result), $expected, $test_name);
	}

	public function getCouseTypesShouldNotHaveThisValue(){
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if 'Engenharia de Software' does not match any key on the array";

		$this->unit->run(array_search("Engenharia de Software", $result), 'is_false', $test_name);
	}

	public function getCouseTypesShouldNotHaveAnIntegerValue(){
		$course_controller = new Course();

		$result = $course_controller->getCourseTypes();

		$test_name = "Test if '15' does not match any key on the array";

		$this->unit->run(array_search(15, $result), 'is_false', $test_name);
	}

// End of tests for getCourseTypes() method

	public function index(){

		/* Call your test functions here */

		// listAllCourses() tests
		$this->listAllCoursesShouldReturnAnArray();
		$this->listAllCoursesFirstRowIdShouldBeEqualsToTwo();
		$this->listAllCoursesFirstRowCourseTypeIdShouldBeEqualsToOne();
		$this->listAllCoursesFirstRowCourseNameShouldBeEqualsToExpected();
		$this->listAllCoursesSecondRowIdShouldBeEqualsToThree();
		$this->listAllCoursesSecondRowCourseTypeIdShouldBeEqualsToOne();
		$this->listAllCoursesSecondRowCourseNameShouldBeEqualsToExpected();

		// getCourseTypes() tests
		$this->getCourseTypesShouldReturnAnArray();
		$this->getCouseTypesShouldHaveTheKey3();
		$this->getCouseTypesShouldHaveTheKey1();
		$this->getCouseTypesShouldHaveTheKey2();
		$this->getCouseTypesShouldNotHaveAnIntegerValue();
		$this->getCouseTypesShouldNotHaveThisValue();


		$test_report = array('unit_report' => $this->unit->report());

		$this->load->view('course/course_test_report', $test_report);
	}

}