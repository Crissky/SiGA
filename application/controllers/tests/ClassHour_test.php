<?php

/**
 * CourseHour class(on /data_types) test class.
 * Provide unit tests for the CourseHour class methods.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../courseClass_test'
 */

require_once(APPPATH."/data_types/ClassHour.php");
require_once(APPPATH."/exception/ClassHourException.php");

class ClassHour_Test extends CI_Controller{

	public function __construct(){
		parent::__construct();
		$this->load->library('unit_test');
		$this->unit->use_strict(TRUE);
	}

/*Valid entries test set*/

	public function shouldInstantiateWithParams_1_1_String(){

		try{
			$classHour = new ClassHour(1, 1, "Sala 1");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments";

		$this->unit->run($classHour, 'is_object', $test_name);
	}

// Ranging first parameter
	public function shouldInstantiateWithParams_rand_1_String(){

		try{
			$classHour = new ClassHour(rand(1,9), 1, "Sala 1");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments by ranging the first parameter";

		$this->unit->run($classHour, 'is_object', $test_name);
	}

	public function shouldInstantiateWithParams_9_1_String(){

		try{
			$classHour = new ClassHour(9, 1, "Sala 1");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments by ranging the first parameter";

		$this->unit->run($classHour, 'is_object', $test_name);
	}
//

// Ranging second parameter
	public function shouldInstantiateWithParams_1_rand_String(){

		try{
			$classHour = new ClassHour(1, rand(1,6), "Sala 1");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments by ranging second parameter";

		$this->unit->run($classHour, 'is_object', $test_name);
	}

	public function shouldInstantiateWithParams_1_6_String(){

		try{
			$classHour = new ClassHour(1, 6, "Sala 1");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments by ranging second parameter";

		$this->unit->run($classHour, 'is_object', $test_name);
	}

//

// Ranging the third parameter
	public function shouldInstantiateWithParams_1_1_EmptyString(){

		try{
			$classHour = new ClassHour(1, 1, "");
		}catch (Exception $caughtException){
			$classHour = FALSE;
		}

		$test_name = "Test the class constructor with valid arguments by ranging second parameter";

		$this->unit->run($classHour, 'is_object', $test_name);
	}
//

/*End of tests for valid entries */



	public function index(){

		// Set this to TRUE to run the tests
		$this->unit->active(TRUE);

		/* Call your test functions here */
		$this->shouldInstantiateWithParams_1_1_String();
		$this->shouldInstantiateWithParams_rand_1_String();
		$this->shouldInstantiateWithParams_9_1_String();
		$this->shouldInstantiateWithParams_1_rand_String();
		$this->shouldInstantiateWithParams_1_6_String();
		$this->shouldInstantiateWithParams_1_1_EmptyString();

		$test_report = array('unit_report' => $this->unit->report());

		$this->load->view('course/course_test_report', $test_report);
	}

}
