<?php

/**
 * SelectionProcess class(on /data_types/selection_process) test class.
 * Provide unit tests for the SelectionProcess class hierarchy methods.
 * Remember to call your test methods in the index method to run them in the test report
 * To access the report generated by these tests, type on the URL: '../selection_process_test'
 */

require_once(APPPATH."/data_types/selection_process/SelectionProcess.php");
require_once(APPPATH."/data_types/selection_process/RegularStudentProcess.php");
require_once(APPPATH."/data_types/selection_process/SpecialStudentProcess.php");
require_once(APPPATH."/exception/SelectionProcessException.php");

class SelectionProcess_Test extends CI_Controller{

    public function __construct(){
        parent::__construct();
        $this->load->library('unit_test');
        
        $tableTemplate = "
          <h2><i class='fa fa-pencil-square-o'></i></h2>
          <div class=\"box-body table-responsive no-padding\">
          <table class=\"table table-bordered table-hover\" cellpadding=\"4\" cellspacing=\"1\">
          <tbody>

              {rows}
              <tr>
              <td class=\"text-center\"><b>{item}</b></td>
              <td class=\"text-center\">{result}</td>
              </tr>
              {/rows}

          </tbody>
          </table>
          </div>
          ";

        $this->unit->set_template($tableTemplate); 

        $this->unit->use_strict(TRUE);
    }

/* Id tests */

    public function shouldInstantiateWithValidId1(){

        $id = "1";
        $course = "1";
        $name = "Edital PPGE 2016";

        $notes = "";
        try{
            $selectionProcess = new RegularStudentProcess($course, $name, $id);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with the id equals to 1";

        $this->unit->run($id, $selectionProcess->getId(), $test_name, $notes);
    }

/* Course tests */

    public function shouldInstantiateWithValidCourseId1(){

        $course = "1";
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with the course id equals to 1";

        $this->unit->run($course, $selectionProcess->getCourse(), $test_name);
    }

    public function shouldInstantiateWithValidRandomCourseId(){

        $course = rand(SelectionProcess::COURSE_MIN_ID, PHP_INT_MAX);
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a random valid course id (id = ".$course.")";

        $this->unit->run($course, $selectionProcess->getCourse(), $test_name);
    }


    public function shouldNotInstantiateWithInvalidCourseId0(){

        $course = 0;
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }
    
    public function shouldNotInstantiateWithInvalidRandomCourseId(){

        $course = rand(PHP_INT_MAX + 1, SelectionProcess::COURSE_MIN_ID-1);
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid random course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithInvalidNullCourseId(){

        $course = NULL;
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid NULL course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithInvalidFalseCourseId(){

        $course = FALSE;
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid FALSE course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithInvalidBlankCourseId(){

        $course = "";
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid blank course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }

    public function shouldNotInstantiateWithInvalidNotNumberCourseId(){

        $course = "abc..";
        $name = "Edital PPGE 2016";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a invalid not number course id (id = ".$course.")";

        $this->unit->run($selectionProcess, "is_false", $test_name);
    }

/* Name tests */

    public function shouldInstantiateWithValidName(){

        $course = "1";
        $name = "Edital PPGE - 2016/1";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
        }

        $test_name = "Test if instantiate with a valid name";

        $this->unit->run($name, $selectionProcess->getName(), $test_name);
    }

    public function shouldNotInstantiateWithInvalidBlankName(){

        $course = "1";
        $name = "";

        $notes = "";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid blank name";

        $this->unit->run($selectionProcess, "is_false", $test_name, $notes);
    }

    public function shouldNotInstantiateWithInvalidNullName(){

        $course = "1";
        $name = NULL;

        $notes = "";

        try{
            $selectionProcess = new RegularStudentProcess($course, $name);
        }catch (SelectionProcessException $e){
            $selectionProcess = FALSE;
            $notes = "<b>Thrown Exception:</b> <i>".get_class($e)."</i> - ".$e->getMessage();
        }

        $test_name = "Test if instantiate with a invalid NULL name";

        $this->unit->run($selectionProcess, "is_false", $test_name, $notes);
    }

/*  */

    public function index(){

        // Set this to TRUE to run the tests
        $this->unit->active(TRUE);

        /* Call your test functions here */

        $this->shouldInstantiateWithValidId1();

        $this->shouldInstantiateWithValidCourseId1();
        $this->shouldInstantiateWithValidRandomCourseId();
        $this->shouldNotInstantiateWithInvalidCourseId0();
        $this->shouldNotInstantiateWithInvalidRandomCourseId();
        $this->shouldNotInstantiateWithInvalidNullCourseId();
        $this->shouldNotInstantiateWithInvalidFalseCourseId();
        $this->shouldNotInstantiateWithInvalidBlankCourseId();
        $this->shouldNotInstantiateWithInvalidNotNumberCourseId();

        $this->shouldInstantiateWithValidName();
        $this->shouldNotInstantiateWithInvalidBlankName();
        $this->shouldNotInstantiateWithInvalidNullName();

        $test_report = array('unit_report' => $this->unit->report());

        $this->load->test_template('tests/SelectionProcess_test_report', $test_report);
    }

}
